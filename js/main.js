/* ===================================
   LOGIC CH√çNH (ƒê√É S·ª¨A L·ªñI)
   =================================== */

// --- Hamburger Menu --- //
document.addEventListener('DOMContentLoaded', function () {
  const hamburger = document.getElementById('hamburger');
  const navbar = document.getElementById('navbar');

  if (hamburger) {
      hamburger.addEventListener('click', function () {
          navbar.classList.toggle('active');
          hamburger.classList.toggle('active');
      });
  }

  // --- D√≤ng ch·ªØ ch·∫°y ngang --- //
  const scrollingTextContainer = document.querySelector('.scrolling-text');
  const scrollingTextInner = document.querySelector('.scrolling-text-inner');
  // Ng∆∞·ª°ng k√Ω t·ª± ƒë·ªÉ quy·∫øt ƒë·ªãnh c√≥ ch·∫°y ch·ªØ hay kh√¥ng
  const SCROLL_THRESHOLD = 50; 

  function updateScrollingText() {
      fetch('data.json')
          .then(response => {
              if (!response.ok) {
                  throw new Error('Kh√¥ng th·ªÉ t·∫£i data.json');
              }
              return response.json();
          })
          .then(data => {
              const text = data.scrollingText || "";

              if (!scrollingTextInner) return; // D·ª´ng n·∫øu kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠

              // **PH·∫¶N S·ª¨A L·ªñI QUAN TR·ªåNG**
              // 1. X√≥a s·∫°ch n·ªôi dung c≈© ƒë·ªÉ tr√°nh nh√¢n ƒë√¥i
              scrollingTextInner.innerHTML = '';

              // 2. T·∫°o m·ªôt span ch·ª©a n·ªôi dung g·ªëc
              const contentSpan = document.createElement('span');
              contentSpan.className = 'scrolling-text-content';
              contentSpan.textContent = text;
              scrollingTextInner.appendChild(contentSpan);

              // 3. Quy·∫øt ƒë·ªãnh hi·ªáu ·ª©ng d·ª±a tr√™n ƒë·ªô d√†i
              if (text.length > SCROLL_THRESHOLD) {
                  // N·∫øu ƒë·ªß d√†i, t·∫°o m·ªôt b·∫£n sao ƒë·ªÉ cu·ªôn li·ªÅn m·∫°ch
                  const cloneSpan = contentSpan.cloneNode(true);
                  scrollingTextInner.appendChild(cloneSpan);

                  scrollingTextContainer.classList.add('scroll');
                  scrollingTextContainer.classList.remove('pulse');
              } else {
                  // N·∫øu ng·∫Øn, d√πng hi·ªáu ·ª©ng pulse
                  scrollingTextContainer.classList.add('pulse');
                  scrollingTextContainer.classList.remove('scroll');
              }
          })
          .catch(error => {
              console.error('L·ªói khi c·∫≠p nh·∫≠t d√≤ng ch·ªØ ch·∫°y:', error);
              if (scrollingTextInner) {
                  scrollingTextInner.textContent = 'L·ªói t·∫£i th√¥ng b√°o...';
              }
          });
  }

  
  // --- Script Sao Ch√©p IP V·ªõi Popup --- //
const copyBtn = document.getElementById('copyBtn');
const serverIP = document.getElementById('serverIP');

function showPopup(message, type = 'success') {
    // t·∫°o popup
    const popup = document.createElement('div');
    popup.style.position = 'fixed';
    popup.style.top = '50%';
    popup.style.left = '50%';
    popup.style.transform = 'translate(-50%, -50%) scale(0)';
    popup.style.background = '#fff';
    popup.style.borderRadius = '12px';
    popup.style.padding = '15px 25px';
    popup.style.boxShadow = '0 5px 15px rgba(0,0,0,0.3)';
    popup.style.fontSize = '16px';
    popup.style.display = 'flex';
    popup.style.alignItems = 'center';
    popup.style.gap = '10px';
    popup.style.zIndex = '9999';
    popup.style.transition = 'transform 0.3s ease, opacity 0.3s ease';
    popup.style.opacity = '0';

    // icon
    const icon = document.createElement('span');
    icon.style.fontSize = '22px';
    icon.style.animation = 'bounce 0.5s';
    icon.textContent = type === 'success' ? '‚úÖ' : (type === 'warn' ? '‚ö†' : '‚ùå');
    if(type === 'warn') icon.style.color = '#FFA500';
    if(type === 'error') icon.style.color = '#E53935';

    // message
    const text = document.createElement('span');
    text.textContent = message;

    popup.appendChild(icon);
    popup.appendChild(text);
    document.body.appendChild(popup);

    // show animation
    setTimeout(() => {
        popup.style.transform = 'translate(-50%, -50%) scale(1)';
        popup.style.opacity = '1';
    }, 10);

    // auto hide
    setTimeout(() => {
        popup.style.transform = 'translate(-50%, -50%) scale(0)';
        popup.style.opacity = '0';
        setTimeout(() => document.body.removeChild(popup), 300);
    }, 2000);
}

// h·∫°t ·∫£nh
const style = document.createElement('style');
style.innerHTML = `
@keyframes bounce {
  0% { transform: scale(0.5); }
  50% { transform: scale(1.2); }
  100% { transform: scale(1); }
}`;
document.head.appendChild(style);

// c√≥p pi n√∫t
if (copyBtn && serverIP) {
    copyBtn.addEventListener('click', () => {
        const ipText = serverIP.textContent.trim();
        if (!ipText || ipText === '---.---.--.---/----') {
            showPopup('IP m√°y ch·ªß ch∆∞a ƒë∆∞·ª£c c·∫≠p nh·∫≠t!', 'warn');
            return;
        }
        navigator.clipboard.writeText(ipText).then(() => {
            showPopup('ƒê√£ sao ch√©p IP: ' + ipText, 'success');
        }).catch(err => {
            showPopup('Sao ch√©p th·∫•t b·∫°i!', 'error');
            console.error('L·ªói sao ch√©p:', err);
        });
    });
}
// khung ƒë·ªïi ch·ªØ 10 gi√¢y 1 l·∫ßn t·∫°i n√∫t sao ch√©p//
const tips = [
    "N·∫øu server ch∆∞a m·ªü m√† c·∫≠u ƒëang ch√°n th√¨ c√≥ th·ªÉ ·∫•n n√∫t v√†o game ch∆°i tr∆∞·ªõc nh√©!",
    "ƒê·ª´ng qu√™n v√†o Discord ƒë·ªÉ t√°m c√πng m·ªçi ng∆∞·ªùi n√® üí¨",
    "Chu·∫©n b·ªã tinh th·∫ßn phi√™u l∆∞u nha ‚öîÔ∏è",
    "H√¥m nay c√≥ s·ª± ki·ªán ƒë·∫∑c bi·ªát ƒë√≥, v√†o s·ªõm k·∫ªo l·ª° nha üòé",
    "Nh·ªõ ƒÉn u·ªëng ƒë·∫ßy ƒë·ªß tr∆∞·ªõc khi c√†y rank nhaaa üçî",
    "Ai v√†o s·ªõm l√† ng∆∞·ªùi may m·∫Øn, bi·∫øt ƒë√¢u g·∫∑p admin t·∫∑ng qu√† ƒë√≥ üéÅ",
    "ƒêang update t√≠ x√≠u th√¥i, r√≥t ly tr√† ch·ªù t√≠ r·ªìi v√¥ c√†y ti·∫øp nha üçµ",
    "Th·ªùi gian ch·ªù ch√≠nh l√† c∆° h·ªôi l√™n k·∫ø ho·∫°ch ph√° ƒë·∫£o th·∫ø gi·ªõi üòè",
    "C·ª© b√¨nh tƒ©nh nha, server ch·ªâ ƒëang l√†m ƒë·∫πp l·∫°i th·∫ø gi·ªõi ch√∫t x√≠u üåà",
    "V√†o game nh·ªõ ch√†o m·ªçi ng∆∞·ªùi nha, c·ªông ƒë·ªìng th√¢n thi·ªán l·∫Øm ü§ó",
    "ƒê·ª´ng qu√™n c·∫•t ƒë·ªì qu√Ω tr∆∞·ªõc khi ra net nh√©, an to√†n l√† tr√™n h·∫øt üõ°Ô∏è",
    "Khi n√†o th·∫•y d√≤ng ‚ÄòM√°y ch·ªß online‚Äô th√¨ ·∫•n v√¥ li·ªÅn, nhanh tay kh√¥ng k·∫ªo full üí®",
    "N·∫øu lag t√≠ th√¨ c≈©ng ƒë·ª´ng gi·∫≠n, server ƒëang c·ªë g·∫Øng h·∫øt s·ª©c v√¨ c·∫≠u üò≠üí™",
    "C·∫£m ∆°n c·∫≠u ƒë√£ ki√™n nh·∫´n, admin ƒëang fix bug b·∫±ng c·∫£ con tim üíö",
    "C·∫≠u bi·∫øt kh√¥ng, ch·ªâ c·∫ßn c·∫≠u ch·ªù ‚Äì server c≈©ng th·∫•y ·∫•m l√≤ng r·ªìi ƒë√≥ ü•π",
    "M·ªôt ch√∫t downtime nh∆∞ng ni·ªÅm vui th√¨ v·∫´n nguy√™n v·∫πn ‚òÄÔ∏è",
    "ƒê·ª´ng qu√™n g·ªçi b·∫°n b√® c√πng v√†o cho vui nhaaa üëØ‚Äç‚ôÇÔ∏è",
    "Nghe n√≥i h√¥m nay spawn point c√≥ ƒëi·ªÅu b·∫•t ng·ªù ƒë√≥ üëÄ",
    "Ai c√†y t·ª´ s√°ng ƒë·∫øn gi·ªù nh·ªõ ngh·ªâ ng∆°i u·ªëng n∆∞·ªõc nha üíß",
    "Server m√† t·ªânh gi·∫•c l√† phi√™u l∆∞u l·∫°i b·∫Øt ƒë·∫ßu üåÑ",
    "Chu·∫©n b·ªã tinh th·∫ßn chi·∫øn ƒë·∫•u n√†o, hero ∆°i üí•",
    "C·∫≠p nh·∫≠t m·ªõi h·ª©a h·∫πn nhi·ªÅu th·ª© th√∫ v·ªã l·∫Øm ƒë√≥ ü§©",
    "V√†o s·ªõm l√†m nhi·ªám v·ª• h√†ng ng√†y cho kh·ªèi qu√™n nha üìú",
    "C·∫£m ∆°n v√¨ c·∫≠u v·∫´n ·ªü ƒë√¢y, loyal player ch√≠nh hi·ªáu üíé"
  ];

  const tipElement = document.getElementById("serverTip");

  // random l·∫ßn ƒë·∫ßu
  let current = Math.floor(Math.random() * tips.length);
  tipElement.textContent = tips[current];

  setInterval(() => {
    tipElement.classList.add("fade-out");

    setTimeout(() => {
      let next;
      do {
        next = Math.floor(Math.random() * tips.length);
      } while (next === current); // tr√°nh tr√πng c√¢u c≈©
      current = next;

      tipElement.textContent = tips[current];
      tipElement.classList.remove("fade-out");
    }, 1000);
  }, 10000);
/* t·ªáp l·ªánh ch·∫°y d√≤ng th·ªùi gian */
  function updateTime() {
    const now = new Date();
    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');
    const seconds = String(now.getSeconds()).padStart(2, '0');
    document.getElementById("currentTime").textContent = `${hours}:${minutes}:${seconds}`;
  }
  setInterval(updateTime, 1000);
  updateTime();
  
});
